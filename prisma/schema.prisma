generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                        Int                    @id @default(autoincrement())
  name                      String                 @db.VarChar(255)
  discordId                 String                 @db.VarChar(255)
  z_availableFunds          BigInt                 @default(100000)
  createdAt                 DateTime               @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime               @updatedAt

  RoulettePlayerBet         RoulettePlayerBet[]
  RoulettePlay              RoulettePlay[]
  PlayerOnRoulettePlay      PlayerOnRoulettePlay[]
  WonderwheelPlay           WonderwheelPlay[]
  BankAccount               BankAccount[]
  BankAccountTransactions   BankAccountTransaction[]
}

// Roulette Plugin

model RoulettePlayerBet {
  id             Int                     @id @default(autoincrement())
  bet            String                  @db.VarChar(255)
  amount         BigInt
  result         Int                     @default(0)
  state          RoulettePlayerPlayState @default(PENDING)
  createdAt      DateTime                @default(now()) @db.Timestamp(6)
  updatedAt      DateTime                @updatedAt
  playerId       Int
  roulettePlayId Int

  Player         Player                  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  RoulettePlay   RoulettePlay            @relation(fields: [roulettePlayId], references: [id], onDelete: Cascade)
}

model RoulettePlay {
  id                   Int                    @id @default(autoincrement())
  winningNumber        Int?
  state                RoulettePlayState      @default(PENDING)
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  updatedAt            DateTime?              @updatedAt

  RoulettePlayerBet    RoulettePlayerBet[]
  RoulettePlayers      Player[]
  PlayerOnRoulettePlay PlayerOnRoulettePlay[]
}

model PlayerOnRoulettePlay {
  player         Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId       Int
  roulettePlay   RoulettePlay @relation(fields: [roulettePlayId], references: [id], onDelete: Cascade)
  roulettePlayId Int
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  updatedAt      DateTime     @updatedAt

  @@id([playerId, roulettePlayId])
}

enum RoulettePlayerPlayState {
  PENDING
  WON
  LOST
  CANCELLED
}

enum RoulettePlayState {
  PENDING
  LOCKED
  FINAL
}

// Wonderwheel Plugin

model WonderwheelPlay {
  id         Int      @id @default(autoincrement())
  prize      Int
  multiplier Int
  amount     BigInt
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt

  playerId   Int
  Player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

// Bank Plugin

model BankAccount {
  id         Int               @id @default(autoincrement())
  name       String            @default("New Account")
  amount     BigInt            @default(0)
  type       BankAccountType   @default(SAVINGS)
  status     BankAccountStatus @default(OPEN)
  lockedTime DateTime?
  createdAt  DateTime          @default(now()) @db.Timestamp(6)
  updatedAt  DateTime          @updatedAt
  playerId   Int

  Player                Player                        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  InboundTranscations   BankAccountTransaction[]      @relation(name: "inboundTransactions")
  OutboundTranscations  BankAccountTransaction[]      @relation(name: "outboundTransactions")
}

enum BankAccountType {
  SPENDINGS
  SAVINGS
  DEPOSIT
}

enum BankAccountStatus {
  OPEN
  LOCKED
}

model BankAccountTransaction {
  id                Int               @id @default(autoincrement())
  amount            BigInt
  sourcePlayerId    Int
  sourceAccountId   Int
  targetAccountId   Int
  createdAt         DateTime          @default(now()) @db.Timestamp(6)
  updatedAt         DateTime          @updatedAt

  SourceAccount     BankAccount       @relation(name:"inboundTransactions", fields: [sourceAccountId], references: [id], onDelete: Cascade)
  TargetAccount     BankAccount       @relation(name: "outboundTransactions", fields: [targetAccountId], references: [id], onDelete: Cascade)
  Player            Player            @relation(fields: [sourcePlayerId], references: [id], onDelete: Cascade)
}