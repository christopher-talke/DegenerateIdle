generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @db.VarChar(255)
  discordId               String                   @db.VarChar(255)
  z_availableFunds        String                   @default("100000")
  createdAt               DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt               DateTime                 @updatedAt
  BankAccount             BankAccount[]
  BankAccountTransactions BankAccountTransaction[]
  PlayerOnRoulettePlay    PlayerOnRoulettePlay[]
  RoulettePlayerBet       RoulettePlayerBet[]
  WonderwheelPlay         WonderwheelPlay[]
  RoulettePlay            RoulettePlay[]
}

model RoulettePlayerBet {
  id             Int                     @id @default(autoincrement())
  bet            String                  @db.VarChar(255)
  amount         String                  @default("100000")
  result         Int                     @default(0)
  state          RoulettePlayerPlayState @default(PENDING)
  createdAt      DateTime                @default(now()) @db.Timestamp(6)
  updatedAt      DateTime                @updatedAt
  playerId       Int
  roulettePlayId Int
  Player         Player                  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  RoulettePlay   RoulettePlay            @relation(fields: [roulettePlayId], references: [id], onDelete: Cascade)
}

model RoulettePlay {
  id                   Int                    @id @default(autoincrement())
  winningNumber        Int?
  state                RoulettePlayState      @default(PENDING)
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  updatedAt            DateTime?              @updatedAt
  PlayerOnRoulettePlay PlayerOnRoulettePlay[]
  RoulettePlayerBet    RoulettePlayerBet[]
  RoulettePlayers      Player[]
}

model PlayerOnRoulettePlay {
  playerId       Int
  roulettePlayId Int
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  updatedAt      DateTime     @updatedAt
  player         Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  roulettePlay   RoulettePlay @relation(fields: [roulettePlayId], references: [id], onDelete: Cascade)

  @@id([playerId, roulettePlayId])
}

model WonderwheelPlay {
  id         Int      @id @default(autoincrement())
  prize      Int
  multiplier Int
  amount     String   @default("100000")
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt
  playerId   Int
  Player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id                   Int                      @id @default(autoincrement())
  name                 String                   @default("New Account")
  amount               String                   @default("100000")
  type                 BankAccountType          @default(SAVINGS)
  status               BankAccountStatus        @default(OPEN)
  lockedTime           DateTime?
  createdAt            DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt            DateTime                 @updatedAt
  playerId             Int
  Player               Player                   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  InboundTranscations  BankAccountTransaction[] @relation("inboundTransactions")
  OutboundTranscations BankAccountTransaction[] @relation("outboundTransactions")
}

model BankAccountTransaction {
  id              Int         @id @default(autoincrement())
  amount          String
  sourcePlayerId  Int
  sourceAccountId Int
  targetAccountId Int
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  updatedAt       DateTime    @updatedAt
  SourceAccount   BankAccount @relation("inboundTransactions", fields: [sourceAccountId], references: [id], onDelete: Cascade)
  Player          Player      @relation(fields: [sourcePlayerId], references: [id], onDelete: Cascade)
  TargetAccount   BankAccount @relation("outboundTransactions", fields: [targetAccountId], references: [id], onDelete: Cascade)
}

enum RoulettePlayerPlayState {
  PENDING
  WON
  LOST
  CANCELLED
}

enum RoulettePlayState {
  PENDING
  LOCKED
  FINAL
}

enum BankAccountType {
  SPENDINGS
  SAVINGS
  DEPOSIT
}

enum BankAccountStatus {
  OPEN
  LOCKED
}
